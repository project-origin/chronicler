# global values
global:
  # imageRegistry is the global docker image registry that will override the image registry for all images in all charts
  imageRegistry: ""

# image holds the configuration for the image to use for the chronicler
image:
  # registry is the registry to pull the image from
  registry: ghcr.io
  # repository is the repository to pull the image from
  repository: project-origin/chronicler
  # tag is the tag to pull defaults to the chart version
  tag:

# resources holds the configuration for the resource requests and limits
resources:
  # requests holds the configuration for the resource requests
  requests:
    # cpu defines the cpu request limit for the chronicler server
    cpu: 500m
    # memory defines the memory request limit for the chronicler server
    memory:

  # limits holds the configuration for the resource limits
  limits:
    # cpu defines the cpu limit for the chronicler server
    cpu:
    # memory defines the memory limit for the chronicler server
    memory: 200Mi

# service holds the configuration for the service
service:
  # type is the type of service to create, allowed values are (ClusterIP | LoadBalancer)
  type: ClusterIP
  # httpPort is the port to use for the http service
  httpPort: 5000
  # grpcPort is the port to use for the grpc service
  grpcPort: 5001

# replicaCount defines the number of replicas to run
replicaCount: 3

# config holds general configuration for the chronicler server
config:
  # signingKeySecret defines the secret that holds the signing key for the chronicler server
  signingKeySecret:
    name:
    key:

  # jobInterval defines the interval to run the job to check for new blocks on the regitries, defaults to 1h
  jobInterval: 01:00:00

  # gridAreas defines a list of grid areas to sign claimIntents for
  gridAreas:
    #- narnia

# networkConfig holds the configuration for the ProjectOrigin network configuration
networkConfig:
  # refreshInterval defines how often the network configuration should be refreshed, defaults to 15 minutes
  refreshInterval: 00:15:00

  # url defines an url to fetch the network configuration from, allowed formats are json or yaml
  url: # https://example.com/networkConfiguration.json

  # configMap defines an existing configmap to fetch the network configuration from
  configMap:
    # name: verifier-network-configuration
    # key: networkConfiguration.json

  # yaml defines the network configuration as a string in yaml
  yaml: #|-
  #   registries:
  #     narniaReegistry:
  #       url: "https://registry.narnia.example.com",
  #   areas:
  #     DK1:
  #       issuerKeys:
  #       - publicKey: "Ay02vkc6FGV8FwtvVsmBO2p7UdbZIcFhvMGFB40D3DKX"

  # json defines the network configuration as a string in json
  json: #|-
  #  {
  #    "registries": {
  #      "narniaReegistry": {
  #        "url": "https://registry.narnia.example.com"
  #      }
  #    },
  #    "areas": {
  #      "DK1": {
  #        "issuerKeys": [
  #          {
  #            "publicKey": "Ay02vkc6FGV8FwtvVsmBO2p7UdbZIcFhvMGFB40D3DKX"
  #          }
  #        ]
  #      }
  #    }
  #  }

# postgresql holds the configuration for the postgresql database, each value is required and can be set directly, via a secretRef, or via a configMapRef
postgresql:
  # host defines the host of the postgresql database
  host:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # port defines the port of the postgresql database
  port:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # database defines the name of the postgresql database
  database:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # username defines the username to use to connect to the postgresql database
  username:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:
  # password defines the password to use to connect to the postgresql database
  password:
    # secretRef:
    #   name:
    #   key:
    # configMapRef:
    #   name:
    #   key:

# otlp holds the configuration for the opentelemetry collector
otlp:
  # enabled determines if the opentelemetry collector is enabled
  enabled: false
  # endpoint defines the endpoint of the opentelemetry collector, example "http://otel-collector:4317"
  endpoint:

# migrationWaiter holds the configuration for the migration waiter
migrationWaiter:
  # image holds the configuration for the image to use for the migration waiter
  image:
    registry: docker.io
    # repository is the repository to pull the image from
    repository: bitnami/kubectl
    # tag is the tag to pull defaults to the chart version
    tag: 1.31.3
